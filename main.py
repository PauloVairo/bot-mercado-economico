import os
from telegram import Bot
from macro_scheduler import enviar_agenda_macro
from market_fetcher import enviar_panorama_mercado
from datetime import datetime

# ==== VARI√ÅVEIS DE AMBIENTE ====
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=TOKEN)

# ==== 1. Enviar confirma√ß√£o de in√≠cio ====
bot.send_message(chat_id=CHAT_ID, text="‚úÖ Bot Macro Trader iniciado com sucesso. Teste completo em andamento...")

# ==== 2. Enviar agenda econ√¥mica 3 touros (agenda do dia seguinte) ====
try:
    enviar_agenda_macro()
    bot.send_message(chat_id=CHAT_ID, text="üóìÔ∏è Agenda macroecon√¥mica enviada.")
except Exception as e:
    bot.send_message(chat_id=CHAT_ID, text=f"‚ö†Ô∏è Erro ao enviar agenda macroecon√¥mica: {e}")

# ==== 3. Enviar panorama de mercado ====
try:
    enviar_panorama_mercado()
    bot.send_message(chat_id=CHAT_ID, text="üåç Panorama de mercado enviado.")
except Exception as e:
    bot.send_message(chat_id=CHAT_ID, text=f"‚ö†Ô∏è Erro ao enviar panorama de mercado: {e}")

# ==== 4. Simular disparo de not√≠cia com palavra-chave ====
try:
    noticia = "Estados Unidos reporta infla√ß√£o acima do esperado, refor√ßando apostas em juros mais altos."
    impacto = "üü° Impacto moderado no d√≥lar (WDO) e futuros americanos (Nasdaq/S&P)."
    recomendacao = "üìâ Press√£o vendedora no in√≠cio, poss√≠vel recupera√ß√£o no final do dia."

    bot.send_message(
        chat_id=CHAT_ID,
        text=f"üì∞ *Alerta de Not√≠cia Macro*\n\n{noticia}\n\n{impacto}\n{recomendacao}",
        parse_mode="Markdown"
    )
except Exception as e:
    bot.send_message(chat_id=CHAT_ID, text=f"‚ö†Ô∏è Erro ao simular not√≠cia macro: {e}")
